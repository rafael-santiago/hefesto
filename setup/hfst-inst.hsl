#
# "hfst-inst.hsl"
#
# Description: Hefesto self installer.
#
#              Don't touch unless you know what you're
#                                                doing.
#

toolset "hefesto-self-installer" # Dummie toolset
 forge function "hfst_install" :
$

local function lsdir() : result type list {
    var retval type list;
    var temp type list;
    var path type string;
    $temp.ls(".*");
    var t type int;
    $t = 0;
    while ($t < $temp.count()) {
        $path = $temp.item($t);
        if (is_dir($path) == 1) {
            $retval.add_item($path);
        }
        $t = $t + 1;
    }
    result $retval;
}

local function rmtree(subdir type list) : result type int {
    var files type list;
    var f type int;
    var filepath type string;
    var rm type int;
    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();
    $files.clear();
    $files.ls(".*");
    $f = 0;
    $rm = 0;
    while ($f < $files.count() && $rm == 0) {
        $filepath = $files.item($f);
        if (is_dir($filepath) == 0) {
            $rm = hefesto.sys.rm($filepath);
        }
        $f = $f + 1;
    }
    $f = 0;
    while ($f < $subdir.count() && $rm == 0) {
        $filepath = $subdir.item($f);
        hefesto.sys.cd($filepath);
        $rm = rmtree(lsdir());
        $f = $f + 1;
    }
    if ($rm == 0) {
        $rm = hefesto.sys.rmdir($oldcwd);
    }
    result $rm;
}

local function is_dir(path type string) : result type int {
    var old_cwd type string;
    var is_dir type int;
    $old_cwd = hefesto.sys.pwd();
    $is_dir = hefesto.sys.cd($path);
    hefesto.sys.cd($old_cwd);
    result $is_dir;
}

local function path_exists(path type string) : result type int {
    var old_cwd type string;
    var exists type int;
    $exists = 0;
    $old_cwd = hefesto.sys.pwd();
    hefesto.sys.cd($path);
    if (hefesto.sys.os_name() != "windows") {
        if (hefesto.sys.pwd() == $path) {
            $exists = 1;
        }
    } else {
        if (hefesto.sys.pwd() == $path ||
            hefesto.sys.pwd() == ($path + "\\")) {
            $exists = 1;
        }
    }
    hefesto.sys.cd($old_cwd);
    result $exists;
}

local function create_dir_tree(path type string) : result type int {
    var path_elements type list;
    var p type int;
    var p_sz type int;
    var temp type string;
    var path_sep type string;
    var res type int;
    var cwd type string;
    var fullpath type string;

    $temp = hefesto.sys.os_name();
    if ($temp == "linux"   ||
        $temp == "freebsd" ||
        $temp == "minix"   ||
        $temp == "sunos"   ||
        $temp == "netbsd"  ||
        $temp == "openbsd") {
        $path_sep = "/";
    } else {
        $path_sep = "\\";
    }
    $temp = "";

    $p = 1;
    $p_sz = $path.len();

    $temp = $temp + $path.at(0);

    while ($p < $p_sz) {
        if ($path.at($p) != $path_sep) {
            $temp = $temp + $path.at($p);
        } else {
            $path_elements.add_item($temp);
            $temp = "";
        }
        $p = $p + 1;
    }

    if ($temp != "") $path_elements.add_item($temp);

    $p_sz = $path_elements.count();
    $p = 0;
    $temp = "";
    $fullpath = "";
    $res = 1;

    $cwd = hefesto.sys.pwd();

    while ($p < $p_sz && $res == 1) {
        $temp = $path_elements.item($p);
        if (path_exists($temp) == 0) {
            if (hefesto.sys.mkdir($path_elements.item($p)) != 0) $res = 0;
        }
        if ($fullpath.len() > 0) {
            $fullpath = $fullpath + $path_sep + $temp;
        } else {
            $fullpath = $temp;
        }
        $res = hefesto.sys.cd($temp);
        $p = $p + 1;
    }

    hefesto.sys.cd($cwd);

    result $res;
}

local function get_path_from_filepath(filepath type string) : result type string {

    var filepath_sz type int;
    var f type int;
    var os_name type string;
    var path_sep type string;

    $os_name = hefesto.sys.os_name();

    if ($os_name == "linux"   ||
        $os_name == "freebsd" ||
        $os_name == "minix"   ||
        $os_name == "sunos"   ||
        $os_name == "netbsd"  ||
        $os_name == "openbsd") {
        $path_sep = "/";
    } else {
        $path_sep = "\\";
    }

    $filepath_sz = $filepath.len() - 1;
    while ($filepath.at($filepath_sz) != $path_sep && $filepath_sz > 1) {
        $filepath_sz = $filepath_sz - 1;
    }

    if ($filepath_sz == 1) result "";

    var path type string;
    $f = 0;
    while ($f < $filepath_sz) {
        $path = $path + $filepath.at($f);
        $f = $f + 1;
    }

    result $path;

}

local function tolwrcase(str type string) : result type string {
    var lwr_str type string;
    var s type int;
    $s = 0;
    while ($s < $str.len()) {
        if ($str.at($s) == "A") {
            $lwr_str = $lwr_str + "a";
        } else if ($str.at($s) == "B") {
            $lwr_str = $lwr_str + "b";
        } else if ($str.at($s) == "C") {
            $lwr_str = $lwr_str + "c";
        } else if ($str.at($s) == "D") {
            $lwr_str = $lwr_str + "d";
        } else if ($str.at($s) == "E") {
            $lwr_str = $lwr_str + "e";
        } else if ($str.at($s) == "F") {
            $lwr_str = $lwr_str + "f";
        } else if ($str.at($s) == "G") {
            $lwr_str = $lwr_str + "g";
        } else if ($str.at($s) == "H") {
            $lwr_str = $lwr_str + "h";
        } else if ($str.at($s) == "I") {
            $lwr_str = $lwr_str + "i";
        } else if ($str.at($s) == "J") {
            $lwr_str = $lwr_str + "j";
        } else if ($str.at($s) == "K") {
            $lwr_str = $lwr_str + "k";
        } else if ($str.at($s) == "L") {
            $lwr_str = $lwr_str + "l";
        } else if ($str.at($s) == "M") {
            $lwr_str = $lwr_str + "m";
        } else if ($str.at($s) == "N") {
            $lwr_str = $lwr_str + "n";
        } else if ($str.at($s) == "O") {
            $lwr_str = $lwr_str + "o";
        } else if ($str.at($s) == "P") {
            $lwr_str = $lwr_str + "p";
        } else if ($str.at($s) == "Q") {
            $lwr_str = $lwr_str + "q";
        } else if ($str.at($s) == "R") {
            $lwr_str = $lwr_str + "r";
        } else if ($str.at($s) == "S") {
            $lwr_str = $lwr_str + "s";
        } else if ($str.at($s) == "T") {
            $lwr_str = $lwr_str + "t";
        } else if ($str.at($s) == "U") {
            $lwr_str = $lwr_str + "u";
        } else if ($str.at($s) == "V") {
            $lwr_str = $lwr_str + "v";
        } else if ($str.at($s) == "W") {
            $lwr_str = $lwr_str + "w";
        } else if ($str.at($s) == "X") {
            $lwr_str = $lwr_str + "x";
        } else if ($str.at($s) == "Y") {
            $lwr_str = $lwr_str + "y";
        } else if ($str.at($s) == "Z") {
            $lwr_str = $lwr_str + "z";
        } else {
            $lwr_str = $lwr_str + $str.at($s);
        }
        $s = $s + 1;
    }
    result $lwr_str;
}

local function export_env_hefesto_var(install_dir type string) : result type int {

    var os_name type string;
    var exported type int;
    var data_buf type string;
    $exported = 0;

    $os_name = hefesto.sys.os_name();

    if ($os_name == "linux") {
        var hefesto_sh_fd type file;
        $hefesto_sh_fd = hefesto.sys.fopen("/etc/profile.d/hefesto.sh", "w");
        if ($hefesto_sh_fd != 0) {
            $data_buf = "#!/bin/sh\n\nexport HEFESTO_INCLUDES_HOME=" + hefesto.sys.make_path($install_dir, "include") + "\n";
            $data_buf = $data_buf + "export HEFESTO_MODULES_HOME=" + hefesto.sys.make_path($install_dir, "module") + "\n\n";
            $exported = hefesto.sys.fwrite($data_buf, $data_buf.len(), $hefesto_sh_fd);
            if ($exported == $data_buf.len()) {
                $exported = (hefesto.sys.run("chmod +x /etc/profile.d/hefesto.sh") == 0);
            } else {
                $exported = 0;
            }
            hefesto.sys.fclose($hefesto_sh_fd);
        }
    } else if ($os_name == "freebsd" ||
               $os_name == "minix"   ||
               $os_name == "sunos"   ||
               $os_name == "netbsd"  ||
               $os_name == "openbsd") {
        var profile type list;
        $profile = serialize_profile_file();
        $data_buf = "HEFESTO_INCLUDES_HOME=\"" + hefesto.sys.make_path($install_dir, "include") + "\"; export HEFESTO_INCLUDES_HOME\n";
        $profile.add_item($data_buf);
        $data_buf = "HEFESTO_MODULES_HOME=\"" + hefesto.sys.make_path($install_dir, "module") + "\"; export HEFESTO_MODULES_HOME\n";
        $profile.add_item($data_buf);
        $exported = flush_profile_file($profile);
        if (is_using_csh()) {
            var login_lines type list;
            $login_lines = serialize_login_file();
            $login_lines.add_item("setenv HEFESTO_INCLUDES_HOME " + hefesto.sys.make_path($install_dir, "include"));
            $login_lines.add_item("setenv HEFESTO_MODULES_HOME " + hefesto.sys.make_path($install_dir, "module"));
            $exported = flush_login_file($login_lines);
        }
    } else if ($os_name == "windows") {
        var reg_cmd type string;
        var backshd_dir type string;
        var t type int;
        var temp type string;
        $temp = hefesto.sys.make_path($install_dir, "include");
        $t = 0;
        while ($t < $temp.len()) {
            if ($temp.at($t) == "\\") {
                $backshd_dir = $backshd_dir + "\\";
            }
            $backshd_dir = $backshd_dir + $temp.at($t);
            $t = $t + 1;
        }
        $exported = (hefesto.sys.setenv("WINREG:HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\\HEFESTO_INCLUDES_HOME", $backshd_dir) == 0);
        if ($exported == 1) {
            $temp = hefesto.sys.make_path($install_dir, "module");
            $t = 0;
            $backshd_dir = "";
            while ($t < $temp.len()) {
                if ($temp.at($t) == "\\") {
                    $backshd_dir = $backshd_dir + "\\";
                }
                $backshd_dir = $backshd_dir + $temp.at($t);
                $t = $t + 1;
            }
            $exported = (hefesto.sys.setenv("WINREG:HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\\HEFESTO_MODULES_HOME", $backshd_dir) == 0);
        }

        if ($exported == 1) {
            var path_env type string;

            $path_env = get_windows_path_env_var_content();
            if ($path_env.at($path_env.len()-1) != ";") {
                $path_env = $path_env + ";";
            }
            $path_env = $path_env + $install_dir + "\\bin";

            $exported = (hefesto.sys.setenv("WINREG:HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\\PATH", $path_env) == 0);
        }
    }

    result $exported;

}

local function get_windows_path_env_var_content() : result type string {
    var path type string;
    $path = hefesto.sys.env("WINREG:HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\\PATH");
    result $path;
}

local function serialize_env_path(path type string) : result type list {
    var item type string;
    var p type int;
    var path_lst type list;
    $p = 0;
    while ($p < $path.len()) {
        if ($path.at($p) == ";" && $item.len() > 0) {
            $path_lst.add_item($item);
            $item = "";
        } else {
            if ($path.at($p) != ";") $item = $item + $path.at($p);
        }
        $p = $p + 1;
    }
    if ($item.len() > 0) {
        $path_lst.item($item);
    }
    result $path_lst;
}

local function serialize_login_file() : result type list {
    result hefesto.sys.lines_from_file(hefesto.sys.make_path(hefesto.sys.env("HOME"), ".login"), ".*");
}

local function flush_login_file(login_lines type list) : result type int {
    var l type int;
    var lp type file;

    if ($login_lines.count() == 0) {
        result 1;
    }

    $lp = hefesto.sys.fopen(hefesto.sys.make_path(hefesto.sys.env("HOME"), ".login"), "w");

    if ($lp == 0) {
        result 0;
    }

    $l = 0;
    while ($l < $login_lines.count()) {
        var line type string;
        $line = $login_lines.item($l);
        if ($line != "\n") {
            $line = $line + "\n";
        }
        hefesto.sys.fwrite($line, $line.len(), $lp);
        $l = $l + 1;
    }


    hefesto.sys.fclose($lp);

    result 1;
}

local function is_using_csh() : result type int {
    var shell_var type string;
    $shell_var = hefesto.sys.env("SHELL");
    result ($shell_var.match(".*/csh$") > 0);
}

local function serialize_profile_file() : result type list {
    var profd type file;
    var line type string;
    var byte type string;
    var lst type list;

    $profd = hefesto.sys.fopen("/etc/profile", "r");
    $line = "";
    $byte = "";
    if ($profd != 0) {
        hefesto.sys.fread($byte, 1, $profd);
        while (hefesto.sys.feof($profd) != 1) {
            if ($byte == "\n") {
                $lst.add_item($line);
                $line = "";
            } else {
                $line = $line + $byte;
            }
            hefesto.sys.fread($byte, 1, $profd);
        }
        if ($line.len() > 0) {
            if ($line != "\r") $lst.add_item($line);
        }
        hefesto.sys.fclose($profd);
    }
    result $lst;
}

local function flush_profile_file(content type list) : result type int {
    var ret type int;
    var c type int;
    var profd type file;
    var line type string;
    $ret = 0;
    $c = 0;
    $profd = hefesto.sys.fopen("/etc/profile", "w");
    if ($profd != 0) {
        while ($c < $content.count()) {
            $line = $content.item($c);
            hefesto.sys.fwrite($line, $line.len(), $profd);
            if ($content.item($c) != "\n" && $c + 1 < $content.count()) {
                hefesto.sys.fwrite("\n", 1, $profd);
            }
            $c = $c + 1;
        }
        hefesto.sys.fclose($profd);
        $ret = 1;
    }
    result $ret;
}

local function unexport_env_hefesto_var() : result type int {
    var os_name type string;
    var unexported type int;
    $unexported = 0;
    $os_name = hefesto.sys.os_name();
    if ($os_name == "linux") {
        $unexported = (hefesto.sys.rm("/etc/profile.d/hefesto.sh") == 0);
    } else if ($os_name == "freebsd" ||
               $os_name == "minix"   ||
               $os_name == "sunos"   ||
               $os_name == "netbsd"  ||
               $os_name == "openbsd") {
        var profile type list;
        var p type int;
        var item type string;
        $profile = serialize_profile_file();
        $p = 0;
        while ($p < $profile.count()) {
            $item = $profile.item($p);
            if ($item.match("^HEFESTO_INCLUDES_HOME=") == 1 || $item.match("^HEFESTO_MODULES_HOME=")) {
                $profile.del_index($p);
                $p = $p - 1;
            }
            $p = $p + 1;
        }
        $unexported = flush_profile_file($profile);
        if (is_using_csh()) {
            var login_lines type list;
            $login_lines = serialize_login_file();
            var l type int;
            $l = 0;
            while ($l < $login_lines.count()) {
                var login_line type string;
                $login_line = $login_lines.item($l);
                if ($login_line.match("setenv HEFESTO_INCLUDES_HOME ") == 1 || $login_line.match("setenv HEFESTO_MODULES_HOME ") == 1) {
                    $login_lines.del_index($l);
                    $l = $l - 1;
                }
                $l = $l + 1;
            }
            $unexported = flush_login_file($login_lines);
        }
    } else if ($os_name == "windows") {
        $unexported = (hefesto.sys.unsetenv("WINREG:HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\\HEFESTO_INCLUDES_HOME") == 0);
        if ($unexported == 1) {
            var path_lst type list;
            $path_lst = serialize_env_path(get_windows_path_env_var_content());
            $l = 0;
            while ($path_lst.index_of($install_dir + "\\bin") > -1) {
                $path_lst.del_item($install_dir + "\\bin");
            }
            var env_path type string;
            while ($l < $path_lst.count()) {
                $env_path = $env_path + $path_lst.item($l);
                $l = $l + 1;
                if ($l < $path_lst.count()) $env_path = $env_path + ";";
            }
            $unexported = (hefesto.sys.setenv("WINREG:HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\\PATH", $env_path) == 0);
        }
    }
    result 1; #  Let's ignore unexporting status.
}

local function brk_test() : result type int { # WTF???! I don't know....
    var i type int;
    $i = 0;
    while ($i < 100) {
        hefesto.sys.echo("i = " + $i + "\n");
        if ($i == 4) {
            if ($i == 3) {
                break;
            }
        } else {
            if ($i == 3)
                if ($i == 3)
                    break;
                else
                    hefesto.sys.echo("nao eh...\n");
        }
        $i = $i + 1;
    }
    result 0;
}

local function hfst_install(install_dir type string, source_files type list, dest_files type list) : result type int {

    var paths_to_create type list;
    var temp type string;
    var sz type int;
    var i type int;
    var res type int;
    var platform type string;

    $sz = $dest_files.count();
    $i = 0;
    while ($i < $sz) {
        $temp = $dest_files.item($i);
        $temp = get_path_from_filepath($temp);
        if ($temp.len() > 0 && $paths_to_create.index_of($temp) == -1)
            $paths_to_create.add_item($temp);
        $i = $i + 1;
    }

    hefesto.sys.echo("-- Scanning destination paths...\n");

    $sz = $paths_to_create.count();
    $i = 0;
    while ($i < $sz) {
        $temp = $paths_to_create.item($i);
        if (path_exists($temp) == 0) {
            hefesto.sys.echo("-- Need to create path \"" + $temp + "\"... ");
            if (create_dir_tree($temp)) {
                hefesto.sys.echo("created.\n");
            } else {
                hefesto.sys.echo("not created... aborting...\n");
                result 1;
            }
        } else {
            hefesto.sys.echo("-- Path \"" + $temp + "\" already exists.\n");
        }
        $i = $i + 1;
    }

    hefesto.sys.echo("-- All destination paths are ok. Now copying files...\n");

    $sz = $source_files.count();
    $i = 0;
    $res = 1;
    while (($res == 1) && ($i < $sz)) {
        hefesto.sys.echo("\tcopying " + $source_files.item($i)  + " to " + $dest_files.item($i) + "... ");
        $res = hefesto.sys.cp($source_files.item($i), $dest_files.item($i));
        if ($res == 1) {
            hefesto.sys.echo("ok!\n");
        } else {
            hefesto.sys.echo("error...\n");
        }
        $i = $i + 1;
    }

    if ($res == 1) {
        hefesto.sys.echo("-- Done ;)\n");
        if (hefesto.sys.os_name() != "windows") {
            hefesto.sys.echo("-- Exporting HEFESTO_INCLUDES_HOME environment var...\n");
        } else {
            hefesto.sys.echo("-- Exporting HEFESTO_INCLUDES_HOME environment var, adding hefesto export to PATH environment var...\n");
        }
        $res = export_env_hefesto_var($install_dir);
    }

    if ($res == 1) {
        if (hefesto.sys.os_name() == "linux"   ||
            hefesto.sys.os_name() == "freebsd" ||
            hefesto.sys.os_name() == "minix"   ||
            hefesto.sys.os_name() == "sunos"   ||
            hefesto.sys.os_name() == "netbsd"  ||
            hefesto.sys.os_name() == "openbsd") {
            hefesto.sys.echo("-- Setting instalation directory permissions... ");
            if (hefesto.sys.run("chmod -R 754 " + $install_dir) == 0) {
                hefesto.sys.echo("ok!\n");
            } else {
                hefesto.sys.echo("fail, please do it later :(\n");
            }
        }
        hefesto.sys.echo("-- Done ;)\n");
    } else {
        hefesto.sys.echo("-- Tsc!......\n-- Wait... rolling back the partial install...\n");
        hfst_uninstall($install_dir, $dest_files);
        hefesto.sys.echo("-- Done.\n");
        result 1;
    }

    result 0;

}

local function windows_rm_paths_on_reboot(paths type list) : result type none {
    var p type int;
    var reg_cmd type string;
    var rm_cmd type string;
    var str type string;
    $p = 0;
    $rm_cmd = "cmd /c ";
    while ($p < $paths.count()) {
        $str = $paths.item($p);
        if (is_dir($str) == 0) {
           $rm_cmd = $rm_cmd + " del \"" + $paths.item($p) + "\"";
        } else {
            $rm_cmd = $rm_cmd + " rmdir \"" + $paths.item($p) + "\"";
        }

        $p = $p + 1;

        if ($p != $paths.count()) $rm_cmd = $rm_cmd + " &";
    }
    hefesto.sys.setenv("WINREG:HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\hfstbootrm", $rm_cmd);
}

local function hfst_uninstall(install_dir type string, source_files type list) : result type int {
    var subdirs type list;
    var hhh type list;
    var sz type int;
    var i type int;
    var temp type string;
    var s_len type int;
    var t_len type int;
    var s type int;
    var path_sep type string;
    var subdir type string;
    var regex type string;
    var removed_paths type list;
    var remove_later type list;

    $sz = $source_files.count();
    $i = 0;
    while ($i < $sz) {
        hefesto.sys.echo("\tRemoving file " + $source_files.item($i) + "... ");
        if (hefesto.sys.rm($source_files.item($i)) == 0) {
            hefesto.sys.echo("ok!\n");
        } else {
            if (hefesto.sys.os_name() == "windows" &&
                ($source_files.item($i) == hefesto.sys.make_path($install_dir, "bin\\hefesto.exe") ||
                 $source_files.item($i) == hefesto.sys.make_path($install_dir, "setup\\hfst-inst.hls"))) {
                $remove_later.add_item($source_files.item($i));
            } else {
                hefesto.sys.echo("error...\n");
            }
        }
        $i = $i + 1;
    }

    $temp = hefesto.sys.os_name();
    if ($temp == "linux"   ||
        $temp == "freebsd" ||
        $temp == "minix"   ||
        $temp == "sunos"   ||
        $temp == "netbsd"  ||
        $temp == "openbsd") {
        $path_sep = "/";
    } else {
        $path_sep = "\\";
    }

    $regex = "^" + $install_dir;
    if (hefesto.sys.os_name() == "windows") {
        $temp = "";
        $i = 0;
        $s_len = $regex.len();
        while ($i < $s_len) {
            $temp = $temp + $regex.at($i);
            if ($regex.at($i) == "\\") $temp = $temp + "\\";
            $i = $i + 1;
        }
        $regex = $temp;
    }
    $i = 0;
    $s_len = $install_dir.len();
    while ($i < $sz) {
        $temp = $source_files.item($i);
        if ($temp.match($regex) == 1) {
            $subdirs.clear();
            $s = $s_len;
            $t_len = $temp.len();
            $subdir = "";
            while ($temp.at($s) == $path_sep) $s = $s + 1;
            while ($s < $t_len) {
                if ($temp.at($s) == $path_sep) {
                    if ($subdir.len() > 0) {
                        $subdirs.add_item($subdir);
                        $subdir = "";
                    }
                } else {
                    $subdir = $subdir + $temp.at($s);
                }
                $s = $s + 1;
            }
            $t_len = $subdirs.count();
            while ($t_len > 0) {
                $s = 0;
                $temp = $install_dir;
                while ($s < $t_len) {
                    $temp = hefesto.sys.make_path($temp, $subdirs.item($s));
                    $s = $s + 1;
                }
                if ($removed_paths.index_of($temp) == -1) {
                    hefesto.sys.echo("\tRemoving directory " + $temp + "... ");
                    if (hefesto.sys.rmdir($temp) == 0) {
                        hefesto.sys.echo("ok!\n");
                        $removed_paths.add_item($temp);
                    } else {
                        hefesto.sys.echo("error...\n");
                    }
                }
                $t_len = $t_len - 1;
            }
        }
        $i = $i + 1;
    }

    # modules directory
    hefesto.sys.echo("\tRemoving modules directory... ");
    $temp = hefesto.sys.pwd();
    $regex = hefesto.sys.make_path($install_dir, "module");
    if (hefesto.sys.cd($regex) == 1) {
        if (rmtree(lsdir()) == 0) {
            hefesto.sys.echo("ok!\n");
        } else {
            hefesto.sys.echo("error...\n");
        }
    } else {
        hefesto.sys.echo("not found...\n");
    }
    hefesto.sys.cd($temp);

    hefesto.sys.echo("\tRemoving directory " + $install_dir + "... ");
    if (hefesto.sys.rmdir($install_dir) == 0) {
        hefesto.sys.echo("ok!\n");
    } else {
        if (hefesto.sys.os_name() == "windows") {
            $remove_later.add_item(hefesto.sys.make_path($install_dir, "setup"));
            $remove_later.add_item(hefesto.sys.make_path($install_dir, "bin"));
            $remove_later.add_item($install_dir);
        } else {
            hefesto.sys.echo("error...\n");
        }
    }

    if (hefesto.sys.os_name() != "windows") {
        hefesto.sys.echo("\tUnexporting HEFESTO_INCLUDES_HOME environment var... ");
    } else {
        hefesto.sys.echo("\tUnexporting HEFESTO_INCLUDES_HOME environment var and hefesto export in PATH environment var... ");
    }
    if (unexport_env_hefesto_var()) {
        hefesto.sys.echo("ok!\n");
    } else {
        hefesto.sys.echo("error...\n");
    }

    if (hefesto.sys.os_name() == "windows") {
        if ($remove_later.count() > 0) {
            windows_rm_paths_on_reboot($remove_later);
            hefesto.sys.echo("*** Now you need to reboot your system to finish uninstall process. ***\n");
        }
    }

    result 0;
}

local function is_already_installed(install_dir type string) : result type int {
    var filename type string;
    var old_cwd type string;
    var is_installed type int;
    $is_installed = 0;
    $old_cwd = hefesto.sys.pwd();
    $filename = hefesto.sys.make_path($install_dir, "setup");
    if (hefesto.sys.cd($filename) == 1) {
        $is_installed = (hefesto.sys.ls("hfst\\-inst.hsl") == 1);
        hefesto.sys.cd($old_cwd);
    }
    result $is_installed;
}

local function shorten_path(path type string, from_dir type string) : result type string {
    var p type int;
    var pp type int;
    var end_at type int;
    var atom type string;
    $p = 0;
    $end_at = 0;
    while ($p < $path.len() && $atom != $from_dir) {
        $pp = $p;
        $end_at = $pp;
        $atom = "";
        while ($atom.len() < $from_dir.len()) {
            $atom = $atom + $path.at($pp);
            $pp = $pp + 1;
        }
        $p = $p + 1;
    }
    $p = 0;
    $atom = "";
    while ($p < $end_at) {
        $atom = $atom + $path.at($p);
        if ($path.at($p) == "\\") {
            $atom = $atom + "\\";
        }
        $p = $p + 1;
    }
    if (hefesto.sys.os_name() != "windows") {
        $path.replace($atom, "../");
    } else {
        $path.replace($atom, "..\\");
    }
    result $path;
}

local function prep_mod_src_paths_aux(subdirs type list) : result type list {
    var retval type list;
    var s type int;
    var f type int;
    var files type list;
    var path type string;
    $files.ls(".*");
    $f = 0;
    while ($f < $files.count()) {
        $path = $files.item($f);
        if (is_dir($path) == 0) {
            $retval.add_item(shorten_path($path, "module"));
        }
        $f = $f + 1;
    }
    $s = 0;
    while ($s < $subdirs.count()) {
        $path = $subdirs.item($s);
        hefesto.sys.cd($path);
        $files.clear();
        $files = prep_mod_src_paths_aux(lsdir());
        $f = 0;
        while ($f < $files.count()) {
            $path = $files.item($f);
            if ($retval.index_of($path) == -1) {
                $retval.add_item($path);
            }
            $f = $f + 1;
        }
        $s = $s + 1;
    }
    result $retval;
}

local function prepare_modules_src_paths(sources type list) : result type none {
    var modfiles type list;
    var m type int;
    var oldpath type string;
    $oldpath = hefesto.sys.pwd();
    hefesto.sys.cd("../module");
    $modfiles = prep_mod_src_paths_aux(lsdir());
    hefesto.sys.cd($oldpath);
    $m = 0;
    while ($m < $modfiles.count()) {
        $oldpath = $modfiles.item($m);
        $sources.add_item($oldpath);
        $m = $m + 1;
    }
    hefesto.sys.byref($sources);
}

local function prepare_modules_dest_paths(dests type list, install_dir type string) : result type none {
    var stage_list type list;
    var s type int;
    var dest_path type string;
    var module_dir type string;
    prepare_modules_src_paths($stage_list);
    $module_dir = hefesto.sys.make_path($install_dir, "module");
    $s = 0;
    while ($s < $stage_list.count()) {
        $dest_path = $stage_list.item($s);
        $dest_path.replace("\\.\\.[/\\\\]module", $module_dir);
        $dests.add_item($dest_path);
        $s = $s + 1;
    }
    hefesto.sys.byref($dests);
}

var install_dir type string;
var source_files type list;
var dest_files type list;

var uninst_opt type list;
var cancel type int;

project hefesto-install :
        toolset "hefesto-self-installer" :
                    $install_dir, $source_files, $dest_files ;

hefesto-install.prologue() {

    var os_name type string;
    var prompt_str type string;
    var install_dir_opt type list;

    $cancel = 0;

    $uninst_opt = hefesto.sys.get_option("uninstall");

    $os_name = hefesto.sys.os_name();

    if ($uninst_opt.count() == 0) {
        $prompt_str = "=====================\n== Hefesto install ==\n=====================\n\n";
        $prompt_str = $prompt_str + "Type the directory where you want to install Hefesto or ";
        $prompt_str = $prompt_str + "just type ENTER to use the default or \"cancel\" ";
    } else {
        $prompt_str = "=======================\n== Hefesto uninstall ==\n=======================\n\n";
        $prompt_str = $prompt_str + "Type the directory where was installed Hefesto or ";
        $prompt_str = $prompt_str + "just type ENTER to use the default or \"cancel\" ";
    }

    if ($os_name == "linux") {
        $prompt_str = $prompt_str + "[/usr/local/share/hefesto]: ";
    } else if ($os_name == "freebsd") {
        $prompt_str = $prompt_str + "[/usr/local/share/hefesto]: ";
    } else if ($os_name == "minix") {
        $prompt_str = $prompt_str + "[/usr/local/share/hefesto]: ";
    } else if ($os_name == "sunos") {
        $prompt_str = $prompt_str + "[/usr/local/share/hefesto]: ";
    } else if ($os_name == "netbsd") {
        $prompt_str = $prompt_str + "[/usr/local/share/hefesto]: ";
    } else if ($os_name == "openbsd") {
        $prompt_str = $prompt_str + "[/usr/local/share/hefesto]: ";
    } else if ($os_name == "windows") {
        $prompt_str = $prompt_str +"[C:\\hefesto]: ";
    }

    $install_dir_opt = hefesto.sys.get_option("install-dir");

    if ($install_dir_opt.count() == 0) {
        $install_dir = hefesto.sys.prompt($prompt_str);
    } else {
        $install_dir = $install_dir_opt.item(0);
    }

    if ($install_dir.match("[Cc][aA][nN][cC][eE][lL]") == 1) {
        $cancel = 1;
        hefesto.sys.exit(1);
    } else if ($install_dir == "") {
        if ($os_name == "linux") {
            $install_dir = "/usr/local/share/hefesto";
        } else if ($os_name == "freebsd") {
            $install_dir = "/usr/local/share/hefesto";
        } else if ($os_name == "minix") {
            $install_dir = "/usr/local/share/hefesto";
        } else if ($os_name == "sunos") {
            $install_dir = "/usr/local/share/hefesto";
        } else if ($os_name == "netbsd") {
            $install_dir = "/usr/local/share/hefesto";
        } else if ($os_name == "openbsd") {
            $install_dir = "/usr/local/share/hefesto";
        } else if ($os_name == "windows") {
            $install_dir = "C:\\hefesto";
        }
    }

    #
    # Sources
    #

    # Doc files
    if ($os_name == "linux"   ||
        $os_name == "freebsd" ||
        $os_name == "minix"   ||
        $os_name == "sunos"   ||
        $os_name == "netbsd"  ||
        $os_name == "openbsd") {
        $source_files.add_item("../doc/man/hefesto.1");
    }
    $source_files.add_item("../doc/html/imgs/200712080908-3531.jpg");
    $source_files.add_item("../doc/html/imgs/freebsd_icon.jpg");
    $source_files.add_item("../doc/html/imgs/linux_icon.jpg");
    $source_files.add_item("../doc/html/imgs/windows_icon.jpg");
    $source_files.add_item("../doc/html/index_pt.html");
    $source_files.add_item("../doc/html/index_en.html");
    $source_files.add_item("../doc/html/module-writing-guidelines.html");

    # The binaries
    if ($os_name == "linux"   ||
        $os_name == "freebsd" ||
        $os_name == "minix"   ||
        $os_name == "sunos"   ||
        $os_name == "netbsd"  ||
        $os_name == "openbsd") {
        $source_files.add_item("../bin/hefesto");
    } else {
        $source_files.add_item("../bin/hefesto.exe");
    }

    # The modules
    if ($uninst_opt.count() == 0) {
        prepare_modules_src_paths($source_files);
    }

    # A minimal hstd

    $source_files.add_item("../helios/src/include/toolsets/common/utils/lang/c/dependency_scanner.hsl");
    $source_files.add_item("../helios/src/include/toolsets/gcc/forges/common.hsl");
    $source_files.add_item("../helios/src/include/toolsets/gcc/forges/win_common.hsl");
    $source_files.add_item("../helios/src/include/toolsets/gcc/forges/gcc_c_app_forge.hsl");
    $source_files.add_item("../helios/src/include/toolsets/gcc/forges/gcc_c_lib_forge.hsl");
    $source_files.add_item("../helios/src/include/toolsets/gcc/gcc-app.hsl");
    $source_files.add_item("../helios/src/include/toolsets/gcc/gcc-lib.hsl");
    $source_files.add_item("../helios/src/include/doc/toolsets/gcc/README.md");
    $source_files.add_item("../helios/src/include/toolsets/clang/forges/common.hsl");
    $source_files.add_item("../helios/src/include/toolsets/clang/forges/clang_c_app_forge.hsl");
    $source_files.add_item("../helios/src/include/toolsets/clang/forges/clang_c_lib_forge.hsl");
    $source_files.add_item("../helios/src/include/toolsets/clang/clang-app.hsl");
    $source_files.add_item("../helios/src/include/toolsets/clang/clang-lib.hsl");
    $source_files.add_item("../helios/src/include/doc/toolsets/clang/README.md");
    $source_files.add_item("../helios/src/include/toolsets/latex/forges/latex_forge_stuff.hsl");
    $source_files.add_item("../helios/src/include/toolsets/latex/latex.hsl");
    $source_files.add_item("../helios/src/include/doc/toolsets/latex/README.md");
    $source_files.add_item("../helios/src/include/toolsets/null/null.hsl");
    $source_files.add_item("../helios/src/include/doc/toolsets/null/README.md");
    $source_files.add_item("../helios/src/include/toolsets/vc/common/vssetuputils.hsl");
    $source_files.add_item("../helios/src/include/toolsets/vc/forges/common/vcutils.hsl");
    $source_files.add_item("../helios/src/include/toolsets/vc/forges/vc110_app_forge.hsl");
    $source_files.add_item("../helios/src/include/toolsets/vc/forges/vc110_lib_forge.hsl");
    $source_files.add_item("../helios/src/include/toolsets/vc/vcvarsall/vcvarsall_110.hsl");
    $source_files.add_item("../helios/src/include/toolsets/vc/forges/vc100_app_forge.hsl");
    $source_files.add_item("../helios/src/include/toolsets/vc/forges/vc100_lib_forge.hsl");
    $source_files.add_item("../helios/src/include/toolsets/vc/vcvarsall/vcvarsall_100.hsl");
    $source_files.add_item("../helios/src/include/doc/toolsets/vc/README.md");
    $source_files.add_item("../helios/src/include/toolsets/vc/vc110-app.hsl");
    $source_files.add_item("../helios/src/include/toolsets/vc/vc110-lib.hsl");
    $source_files.add_item("../helios/src/include/toolsets/vc/vc100-app.hsl");
    $source_files.add_item("../helios/src/include/toolsets/vc/vc100-lib.hsl");
    $source_files.add_item("../helios/src/include/conv.hsl");
    $source_files.add_item("../helios/src/include/doc/conv.md");
    $source_files.add_item("../helios/src/include/fsutil.hsl");
    $source_files.add_item("../helios/src/include/doc/fsutil.md");
    $source_files.add_item("../helios/src/include/optutil.hsl");
    $source_files.add_item("../helios/src/include/doc/optutil.md");
    $source_files.add_item("../helios/src/include/string.hsl");
    $source_files.add_item("../helios/src/include/doc/string.md");
    $source_files.add_item("../helios/src/include/lsutil.hsl");
    $source_files.add_item("../helios/src/include/doc/lsutil.md");
    $source_files.add_item("../helios/src/include/generators/codeblocks_project_generator.hsl");
    $source_files.add_item("../helios/src/include/generators/devcpp_project_generator.hsl");
    $source_files.add_item("../helios/src/include/generators/visualstudio_project_generator.hsl");
    $source_files.add_item("../helios/src/include/toolsets/msvc/forges/msvc_forge.hsl");
    $source_files.add_item("../helios/src/include/toolsets/msvc/util/msvc_utils.hsl");
    $source_files.add_item("../helios/src/include/toolsets/msvc/msvc.hsl");

    # The setup files

    $source_files.add_item("../setup/README");
    $source_files.add_item("../setup/LEIAME");
    $source_files.add_item("../setup/hfst-inst.hsl");

    #
    # Destinations
    #

    if ($os_name == "linux"   ||
        $os_name == "freebsd" ||
        $os_name == "minix"   ||
        $os_name == "sunos"   ||
        $os_name == "netbsd"  ||
        $os_name == "openbsd") {
        # Doc files
        $dest_files.add_item("/usr/local/man/man1/hefesto.1");
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "doc/html/imgs/200712080908-3531.jpg"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "doc/html/imgs/freebsd_icon.jpg"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "doc/html/imgs/linux_icon.jpg"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "doc/html/imgs/windows_icon.jpg"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "doc/html/index_pt.html"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "doc/html/index_en.html"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "doc/html/module-writing-guidelines.html"));
        # Binaries
        $dest_files.add_item("/usr/local/bin/hefesto");
        # The modules
        if ($uninst_opt.count() == 0) {
            prepare_modules_dest_paths($dest_files, $install_dir);
        }
        # A minimal hstd
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/toolsets/common/utils/lang/c/dependency_scanner.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/toolsets/gcc/forges/common.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/toolsets/gcc/forges/win_common.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/toolsets/gcc/forges/gcc_c_app_forge.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/toolsets/gcc/forges/gcc_c_lib_forge.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/toolsets/gcc/gcc-app.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/toolsets/gcc/gcc-lib.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/doc/toolsets/gcc/README.md"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/toolsets/clang/forges/common.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/toolsets/clang/forges/clang_c_app_forge.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/toolsets/clang/forges/clang_c_lib_forge.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/toolsets/clang/clang-app.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/toolsets/clang/clang-lib.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/doc/toolsets/clang/README.md"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/toolsets/latex/forges/latex_forge_stuff.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/toolsets/latex/latex.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/doc/toolsets/latex/README.md"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/toolsets/null/null.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/doc/toolsets/null/README.md"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/toolsets/vc/common/vssetuputils.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/toolsets/vc/forges/common/vcutils.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/toolsets/vc/forges/vc110_app_forge.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/toolsets/vc/forges/vc110_lib_forge.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/toolsets/vc/vcvarsall/vcvarsall_110.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/toolsets/vc/forges/vc100_app_forge.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/toolsets/vc/forges/vc100_lib_forge.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/toolsets/vc/vcvarsall/vcvarsall_100.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/doc/toolsets/vc/README.md"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/toolsets/vc/vc110-app.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/toolsets/vc/vc110-lib.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/toolsets/vc/vc100-app.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/toolsets/vc/vc100-lib.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/conv.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/doc/conv.md"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/fsutil.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/doc/fsutil.md"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/optutil.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/doc/optutil.md"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/string.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/doc/string.md"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/lsutil.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/doc/lsutil.md"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/generators/codeblocks_project_generator.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/generators/devcpp_project_generator.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/generators/visualstudio_project_generator.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/toolsets/msvc/forges/msvc_forge.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/toolsets/msvc/util/msvc_utils.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include/toolsets/msvc/msvc.hsl"));
        # The setup files
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "setup/README"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "setup/LEIAME"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "setup/hfst-inst.hsl"));
    } else if ($os_name == "windows") {
        # Doc files
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "doc\\html\\imgs\\200712080908-3531.jpg"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "doc\\html\\imgs\\freebsd_icon.jpg"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "doc\\html\\imgs\\linux_icon.jpg"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "doc\\html\\imgs\\windows_icon.jpg"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "doc\\html\\index_pt.html"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "doc\\html\\index_en.html"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "doc\\html\\module-writing-guidelines.html"));
        # Binaries
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "bin\\hefesto.exe"));
        # The modules
        if ($uninst_opt.count() == 0) {
            prepare_modules_dest_paths($dest_files, $install_dir);
        }
        # A minimal hstd
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\toolsets\\common\\utils\\lang\\c\\dependency_scanner.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\toolsets\\gcc\\forges\\common.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\toolsets\\gcc\\forges\\win_common.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\toolsets\\gcc\\forges\\gcc_c_app_forge.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\toolsets\\gcc\\forges\\gcc_c_lib_forge.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\toolsets\\gcc\\gcc-app.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\toolsets\\gcc\\gcc-lib.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\doc\\toolsets\\gcc\\README.md"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\toolsets\\clang\\forges\\common.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\toolsets\\clang\\forges\\clang_c_app_forge.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\toolsets\\clang\\forges\\clang_c_lib_forge.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\toolsets\\clang\\clang-app.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\toolsets\\clang\\clang-lib.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\doc\\toolsets\\clang\\README.md"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\toolsets\\latex\\forges\\latex_forge_stuff.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\toolsets\\latex\\latex.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\doc\\toolsets\\latex\\README.md"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\toolsets\\null\\null.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\doc\\toolsets\\null\\README.md"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\toolsets\\vc\\common\\vssetuputils.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\toolsets\\vc\\forges\\common\\vcutils.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\toolsets\\vc\\forges\\vc110_app_forge.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\toolsets\\vc\\forges\\vc110_lib_forge.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\toolsets\\vc\\vcvarsall\\vcvarsall_110.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\toolsets\\vc\\forges\\vc100_app_forge.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\toolsets\\vc\\forges\\vc100_lib_forge.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\toolsets\\vc\\vcvarsall\\vcvarsall_100.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\doc\\toolsets\\vc\\README.md"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\toolsets\\vc\\vc110-app.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\toolsets\\vc\\vc110-lib.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\toolsets\\vc\\vc100-app.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\toolsets\\vc\\vc100-lib.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\conv.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\doc\\conv.md"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\fsutil.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\doc\\fsutil.md"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\optutil.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\doc\\optutil.md"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\string.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\doc\\string.md"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\lsutil.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\doc\\lsutil.md"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\generators\\codeblocks_project_generator.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\generators\\devcpp_project_generator.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\generators\\visualstudio_project_generator.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\toolsets\\msvc\\forges\\msvc_forge.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\toolsets\\msvc\\util\\msvc_utils.hsl"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "include\\toolsets\\msvc\\msvc.hsl"));
        # The setup files
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "setup\\README"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "setup\\LEIAME"));
        $dest_files.add_item(hefesto.sys.make_path($install_dir, "setup\\hfst-inst.hsl"));
    }

    if ($uninst_opt.count() == 0) {
        if (is_already_installed($install_dir)) {
            hefesto.sys.echo("\n====================");
            hefesto.sys.echo("\n==================== Hefesto is already installed, uninstalling the older version to install the newest...");
            hefesto.sys.echo("\n====================\n\n");
            var uninstall_cmd type string;
            $uninstall_cmd = "hefesto --forgefiles=" + hefesto.sys.make_path($install_dir, "setup/hfst-inst.hsl") + " --hfst-inst-projects=hefesto-install --uninstall --install-dir=" + $install_dir;
            if (hefesto.sys.os_name() == "windows") {
                var u type int;
                var temp type string;
                $temp = "";
                $u = 0;
                while ($u < $uninstall_cmd.len()) {
                    if ($uninstall_cmd.at($u) == "\\") $temp = $temp + "\\";
                    $temp = $temp + $uninstall_cmd.at($u);
                    $u = $u + 1;
                }
                $uninstall_cmd = $temp;
            }
            if (hefesto.sys.run($uninstall_cmd) != 0) {
                hefesto.sys.exit(1);
            }
        }
        hefesto.sys.echo("\n-- Installing Hefesto...\n\n");
    } else {
        hefesto.sys.echo("\n-- Uninstalling Hefesto...\n\n");
        hefesto.sys.exit(hfst_uninstall($install_dir, $dest_files));
    }

}

hefesto-install.epilogue() {
    if (hefesto.sys.last_forge_result() == 0) {
        if ($uninst_opt.count() == 0)
            hefesto.sys.echo("\n-- Installed.\n\n");
        else
            hefesto.sys.echo("\n-- Uninstalled.\n\n");
    } else {
        if ($cancel == 0) {
            hefesto.sys.echo("\n-- Not installed, please check your permissions.\n\n");
        }
    }
}
